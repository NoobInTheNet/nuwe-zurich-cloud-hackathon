pipeline {
    agent any

    environment {
        // Assuming 'aws-credentials-id' is the ID of your AWS credentials in Jenkins
        AWS_CREDENTIALS = credentials('73c95420-827e-4657-8f1c-9e1be0c779d1')
    }

    stages {
        stage('Initialize') {
            steps {
                checkout scm
            }
        }

        stage('Validate') {
            steps {
                dir('automation/terraform-1') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: '73c95420-827e-4657-8f1c-9e1be0c779d1']]) {
                        sh 'terraform init'
                        sh 'terraform validate'
                    }
                }
            }
        }

        stage('Plan') {
            steps {
                dir('automation/terraform-1') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: '73c95420-827e-4657-8f1c-9e1be0c779d1']]) {
                        script {
                            def planOutput = sh(returnStdout: true, script: 'terraform plan -detailed-exitcode -out=tfplan')
                            if (planOutput.contains('No changes')) {
                                echo 'No infrastructure changes detected. Skipping deployment.'
                                currentBuild.result = 'SUCCESS'
                    } else if (planOutput.contains('Error:')) {
                                error('terraform plan validation failed. Please fix the configuration.')
                    } else {
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
        }

        stage('Apply') {
            when {
                expression { currentBuild.result != 'SUCCESS' }
            }
            steps {
                dir('automation/terraform-1') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: '73c95420-827e-4657-8f1c-9e1be0c779d1']]) {
                        sh 'terraform apply -auto-approve -input=false -refresh=false -detailed-exitcode tfplan'
                    }
                }
            }
        }

        stage('Optional Destroy') {
            steps {
                dir('automation/terraform-1') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: '73c95420-827e-4657-8f1c-9e1be0c779d1']]) {
                        input message: 'Proceed with destruction? (Click "Proceed" to continue or "Abort" to cancel)', ok: 'Proceed'
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }

        success {
            echo 'Pipeline completed successfully.'
        }

        failure {
            echo 'Pipeline failed.'
        }
    }
}
