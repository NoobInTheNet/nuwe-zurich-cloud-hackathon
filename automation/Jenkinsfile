pipeline {
    agent any

    environment {
        // Assuming 'aws-credentials-id' is the ID of your AWS credentials in Jenkins
        AWS_CREDENTIALS = credentials('73c95420-827e-4657-8f1c-9e1be0c779d1')
    }

    stages {
        stage('Initialize') {
            steps {
                // Check out the source code from the Gogs repository
                checkout scm
                dir('automation/terraform') {
                    // Change the working directory to 'automation/terraform'
                    sh 'terraform init'
                }
            }
        }

        stage('Validate') {
            steps {
                dir('automation/terraform') {
                    // Change the working directory to 'automation/terraform'
                    sh 'terraform validate'
                }
            }
        }

        stage('Plan') {
            steps {
                dir('automation/terraform') {
                    // Change the working directory to 'automation/terraform'
                    script {
                        def planOutput = sh(returnStdout: true, script: 'terraform plan -detailed-exitcode -out=tfplan')
                        if (planOutput.contains('No changes')) {
                            error('No infrastructure changes detected. Skipping deployment.')
                        } else if (planOutput.contains('Error:')) {
                            error('Terraform plan validation failed. Please fix the configuration.')
                        }
                    }
                }
            }
        }

        stage('Apply') {
            steps {
                dir('automation/terraform') {
                    // Change the working directory to 'automation/terraform'
                    input message: 'Proceed with deployment? ("Proceed" to continue or "Abort" to cancel)', ok: 'Proceed'
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Optional Destroy') {
            steps {
                dir('automation/terraform') {
                    // Change the working directory to 'automation/terraform'
                    input message: 'Proceed with destruction? ("Proceed" to continue or "Abort" to cancel)', ok: 'Proceed'
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }

        success {
            echo 'Pipeline completed successfully.'
        }

        failure {
            echo 'Pipeline failed.'
        }
    }
}
